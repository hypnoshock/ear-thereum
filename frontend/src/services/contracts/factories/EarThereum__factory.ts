/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { EarThereum, EarThereumInterface } from "../EarThereum";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "ArrayLengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "SampleAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "XMAlreadyExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "SampleUploaded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "SongUploaded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "ids",
        type: "bytes4[]",
      },
    ],
    name: "getExistingSampleIDs",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "existingSampleIDs",
        type: "bytes4[]",
      },
      {
        internalType: "uint8",
        name: "smpCount",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "getSampleData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "ids",
        type: "bytes4[]",
      },
    ],
    name: "getSampleDatas",
    outputs: [
      {
        internalType: "bytes[]",
        name: "sampleData",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "getXM",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "samples",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "header",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uploadSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "ids",
        type: "bytes4[]",
      },
      {
        internalType: "bytes[]",
        name: "sampleData",
        type: "bytes[]",
      },
    ],
    name: "uploadSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uploadXM",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "xm",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e58806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063c011151d11610066578063c011151d1461010a578063d2a950a51461011d578063d629417a1461013d578063d73f112f1461015e578063f9ebd83e1461017157600080fd5b80638874ac52146100985780638d7544a0146100c25780639f3f7c84146100e2578063a07499e9146100f7575b600080fd5b6100ab6100a636600461097c565b610184565b6040516100b99291906109be565b60405180910390f35b6100d56100d0366004610a33565b6102b7565b6040516100b99190610a9b565b6100f56100f0366004610aae565b610364565b005b6100d5610105366004610a33565b610415565b6100f5610118366004610b31565b61043d565b61013061012b36600461097c565b6105eb565b6040516100b99190610b9d565b61015061014b366004610a33565b610754565b6040516100b9929190610bff565b6100f561016c366004610aae565b6107fb565b6100d561017f366004610a33565b610896565b606060008267ffffffffffffffff8111156101a1576101a1610c24565b6040519080825280602002602001820160405280156101ca578160200160208202803683370190505b50915060005b60ff81168411156102af57600080600087878560ff168181106101f5576101f5610c3a565b905060200201602081019061020a9190610a33565b6001600160e01b03191681526020810191909152604001600020805461022f90610c50565b9050111561029d5784848260ff1681811061024c5761024c610c3a565b90506020020160208101906102619190610a33565b838360ff168151811061027657610276610c3a565b6001600160e01b0319909216602092830291909101909101528161029981610c8a565b9250505b806102a781610c8a565b9150506101d0565b509250929050565b6001600160e01b0319811660009081526001602052604090208054606091906102df90610c50565b80601f016020809104026020016040519081016040528092919081815260200182805461030b90610c50565b80156103585780601f1061032d57610100808354040283529160200191610358565b820191906000526020600020905b81548152906001019060200180831161033b57829003601f168201915b50505050509050919050565b6001600160e01b031983166000908152600160205260408120805461038890610c50565b905011156103b457826040516346c7551b60e11b81526004016103ab9190610cb7565b60405180910390fd5b6001600160e01b0319831660009081526001602052604090206103d8828483610d1b565b507f1c9d9d899d4828dab48322909d8a35167b60ed320f63818cbc54d3e82687a9c6836040516104089190610cb7565b60405180910390a1505050565b6001600160e01b0319811660009081526020819052604090208054606091906102df90610c50565b82811461048d57604051639c875a0560e01b815260206004820152601f60248201527f4561725468657265756d3a2041727261794c656e6774684d69736d617463680060448201526064016103ab565b60005b60ff81168411156105e45760008086868460ff168181106104b3576104b3610c3a565b90506020020160208101906104c89190610a33565b6001600160e01b0319168152602081019190915260400160002080546104ed90610c50565b90506000036105725782828260ff1681811061050b5761050b610c3a565b905060200281019061051d9190610ddb565b60008088888660ff1681811061053557610535610c3a565b905060200201602081019061054a9190610a33565b6001600160e01b0319168152602081019190915260400160002091610570919083610d1b565b505b7fa03d59e0bfbde19f279ff1d1180cdf08ec97fe8e8e0720443f29f01b71db1ec785858360ff168181106105a8576105a8610c3a565b90506020020160208101906105bd9190610a33565b6040516105ca9190610cb7565b60405180910390a1806105dc81610c8a565b915050610490565b5050505050565b60608167ffffffffffffffff81111561060657610606610c24565b60405190808252806020026020018201604052801561063957816020015b60608152602001906001900390816106245790505b50905060005b60ff811683111561074d5760008085858460ff1681811061066257610662610c3a565b90506020020160208101906106779190610a33565b6001600160e01b03191681526020810191909152604001600020805461069c90610c50565b80601f01602080910402602001604051908101604052809291908181526020018280546106c890610c50565b80156107155780601f106106ea57610100808354040283529160200191610715565b820191906000526020600020905b8154815290600101906020018083116106f857829003601f168201915b5050505050828260ff168151811061072f5761072f610c3a565b6020026020010181905250808061074590610c8a565b91505061063f565b5092915050565b60006020819052908152604090208054819061076f90610c50565b80601f016020809104026020016040519081016040528092919081815260200182805461079b90610c50565b80156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b5050506001909301549192505060ff1682565b6001600160e01b031983166000908152602081905260408120805461081f90610c50565b90501115610842578260405163168ed19760e01b81526004016103ab9190610cb7565b6001600160e01b031983166000908152602081905260409020610866828483610d1b565b507fa03d59e0bfbde19f279ff1d1180cdf08ec97fe8e8e0720443f29f01b71db1ec7836040516104089190610cb7565b600160205260009081526040902080546108af90610c50565b80601f01602080910402602001604051908101604052809291908181526020018280546108db90610c50565b80156109285780601f106108fd57610100808354040283529160200191610928565b820191906000526020600020905b81548152906001019060200180831161090b57829003601f168201915b505050505081565b60008083601f84011261094257600080fd5b50813567ffffffffffffffff81111561095a57600080fd5b6020830191508360208260051b850101111561097557600080fd5b9250929050565b6000806020838503121561098f57600080fd5b823567ffffffffffffffff8111156109a657600080fd5b6109b285828601610930565b90969095509350505050565b604080825283519082018190526000906020906060840190828701845b82811015610a015781516001600160e01b031916845292840192908401906001016109db565b50505060ff9490941692019190915250919050565b80356001600160e01b031981168114610a2e57600080fd5b919050565b600060208284031215610a4557600080fd5b610a4e82610a16565b9392505050565b6000815180845260005b81811015610a7b57602081850181015186830182015201610a5f565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610a4e6020830184610a55565b600080600060408486031215610ac357600080fd5b610acc84610a16565b9250602084013567ffffffffffffffff80821115610ae957600080fd5b818601915086601f830112610afd57600080fd5b813581811115610b0c57600080fd5b876020828501011115610b1e57600080fd5b6020830194508093505050509250925092565b60008060008060408587031215610b4757600080fd5b843567ffffffffffffffff80821115610b5f57600080fd5b610b6b88838901610930565b90965094506020870135915080821115610b8457600080fd5b50610b9187828801610930565b95989497509550505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bf257603f19888603018452610be0858351610a55565b94509285019290850190600101610bc4565b5092979650505050505050565b604081526000610c126040830185610a55565b905060ff831660208301529392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610c6457607f821691505b602082108103610c8457634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff8103610cae57634e487b7160e01b600052601160045260246000fd5b60010192915050565b6001600160e01b031991909116815260200190565b601f821115610d1657600081815260208120601f850160051c81016020861015610cf35750805b601f850160051c820191505b81811015610d1257828155600101610cff565b5050505b505050565b67ffffffffffffffff831115610d3357610d33610c24565b610d4783610d418354610c50565b83610ccc565b6000601f841160018114610d7b5760008515610d635750838201355b600019600387901b1c1916600186901b1783556105e4565b600083815260209020601f19861690835b82811015610dac5786850135825560209485019460019092019101610d8c565b5086821015610dc95760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000808335601e19843603018112610df257600080fd5b83018035915067ffffffffffffffff821115610e0d57600080fd5b60200191503681900382131561097557600080fdfea2646970667358221220508e8ca20c9f7b84f277839c1eb432be4c0125d58c4e301b7d984a90065a1e3564736f6c63430008110033";

type EarThereumConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EarThereumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EarThereum__factory extends ContractFactory {
  constructor(...args: EarThereumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EarThereum & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EarThereum__factory {
    return super.connect(runner) as EarThereum__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EarThereumInterface {
    return new Interface(_abi) as EarThereumInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): EarThereum {
    return new Contract(address, _abi, runner) as unknown as EarThereum;
  }
}
