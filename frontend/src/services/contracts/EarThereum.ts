/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EarThereumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "counter"
      | "getCounter"
      | "getSampleData"
      | "incCounter"
      | "samples"
      | "uploadSample"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSampleData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "samples", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "uploadSample",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCounter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSampleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "samples", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uploadSample",
    data: BytesLike
  ): Result;
}

export interface EarThereum extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: EarThereumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  counter: TypedContractMethod<[], [bigint], "view">;

  getCounter: TypedContractMethod<[], [bigint], "view">;

  getSampleData: TypedContractMethod<[id: BytesLike], [string], "view">;

  incCounter: TypedContractMethod<[], [void], "nonpayable">;

  samples: TypedContractMethod<
    [arg0: BytesLike],
    [[string, bigint] & { data: string; header: bigint }],
    "view"
  >;

  uploadSample: TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "counter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSampleData"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "incCounter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "samples"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[string, bigint] & { data: string; header: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "uploadSample"
  ): TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
