/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EarThereumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getExistingSampleIDs"
      | "getSampleData"
      | "getSampleDatas"
      | "getXM"
      | "samples"
      | "uploadSample"
      | "uploadSamples"
      | "uploadXM"
      | "xm"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SampleUploaded" | "SongUploaded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getExistingSampleIDs",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSampleData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSampleDatas",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "getXM", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "samples", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "uploadSample",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadSamples",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadXM",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "xm", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "getExistingSampleIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSampleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSampleDatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getXM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "samples", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uploadSample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uploadXM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xm", data: BytesLike): Result;
}

export namespace SampleUploadedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SongUploadedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EarThereum extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: EarThereumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getExistingSampleIDs: TypedContractMethod<
    [ids: BytesLike[]],
    [[string[], bigint] & { existingSampleIDs: string[]; smpCount: bigint }],
    "view"
  >;

  getSampleData: TypedContractMethod<[id: BytesLike], [string], "view">;

  getSampleDatas: TypedContractMethod<[ids: BytesLike[]], [string[]], "view">;

  getXM: TypedContractMethod<[id: BytesLike], [string], "view">;

  samples: TypedContractMethod<
    [arg0: BytesLike],
    [[string, bigint] & { data: string; header: bigint }],
    "view"
  >;

  uploadSample: TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  uploadSamples: TypedContractMethod<
    [ids: BytesLike[], sampleData: BytesLike[]],
    [void],
    "nonpayable"
  >;

  uploadXM: TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  xm: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getExistingSampleIDs"
  ): TypedContractMethod<
    [ids: BytesLike[]],
    [[string[], bigint] & { existingSampleIDs: string[]; smpCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSampleData"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSampleDatas"
  ): TypedContractMethod<[ids: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "getXM"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "samples"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[string, bigint] & { data: string; header: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "uploadSample"
  ): TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uploadSamples"
  ): TypedContractMethod<
    [ids: BytesLike[], sampleData: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uploadXM"
  ): TypedContractMethod<
    [id: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xm"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getEvent(
    key: "SampleUploaded"
  ): TypedContractEvent<
    SampleUploadedEvent.InputTuple,
    SampleUploadedEvent.OutputTuple,
    SampleUploadedEvent.OutputObject
  >;
  getEvent(
    key: "SongUploaded"
  ): TypedContractEvent<
    SongUploadedEvent.InputTuple,
    SongUploadedEvent.OutputTuple,
    SongUploadedEvent.OutputObject
  >;

  filters: {
    "SampleUploaded(bytes4)": TypedContractEvent<
      SampleUploadedEvent.InputTuple,
      SampleUploadedEvent.OutputTuple,
      SampleUploadedEvent.OutputObject
    >;
    SampleUploaded: TypedContractEvent<
      SampleUploadedEvent.InputTuple,
      SampleUploadedEvent.OutputTuple,
      SampleUploadedEvent.OutputObject
    >;

    "SongUploaded(bytes4)": TypedContractEvent<
      SongUploadedEvent.InputTuple,
      SongUploadedEvent.OutputTuple,
      SongUploadedEvent.OutputObject
    >;
    SongUploaded: TypedContractEvent<
      SongUploadedEvent.InputTuple,
      SongUploadedEvent.OutputTuple,
      SongUploadedEvent.OutputObject
    >;
  };
}
